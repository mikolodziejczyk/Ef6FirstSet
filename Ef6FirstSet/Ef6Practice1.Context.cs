//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ef6FirstSet
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Ef6Practice1Entities : DbContext
    {
        public Ef6Practice1Entities()
            : base("name=Ef6Practice1Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Contact> Contact { get; set; }
        public virtual DbSet<Contract> Contract { get; set; }
        public virtual DbSet<Order> Order { get; set; }
        public virtual DbSet<ContactsWithContract> ContactsWithContract { get; set; }
    
        [DbFunction("Ef6Practice1Entities", "GetContactForContractAsFunction")]
        public virtual IQueryable<GetContactForContractAsFunction_Result> GetContactForContractAsFunction(Nullable<int> contractId)
        {
            var contractIdParameter = contractId.HasValue ?
                new ObjectParameter("contractId", contractId) :
                new ObjectParameter("contractId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetContactForContractAsFunction_Result>("[Ef6Practice1Entities].[GetContactForContractAsFunction](@contractId)", contractIdParameter);
        }
    
        [DbFunction("Ef6Practice1Entities", "GetContractCodes")]
        public virtual IQueryable<GetContractCodes_Result> GetContractCodes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetContractCodes_Result>("[Ef6Practice1Entities].[GetContractCodes]()");
        }
    
        [DbFunction("Ef6Practice1Entities", "GetSimplifiedContactsAsFunction")]
        public virtual IQueryable<GetSimplifiedContactsAsFunction_Result> GetSimplifiedContactsAsFunction(Nullable<int> contractId)
        {
            var contractIdParameter = contractId.HasValue ?
                new ObjectParameter("contractId", contractId) :
                new ObjectParameter("contractId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetSimplifiedContactsAsFunction_Result>("[Ef6Practice1Entities].[GetSimplifiedContactsAsFunction](@contractId)", contractIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetContactCount(Nullable<int> contactType)
        {
            var contactTypeParameter = contactType.HasValue ?
                new ObjectParameter("contactType", contactType) :
                new ObjectParameter("contactType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetContactCount", contactTypeParameter);
        }
    
        public virtual ObjectResult<GetContactForContract_Result> GetContactForContract(Nullable<int> contractId)
        {
            var contractIdParameter = contractId.HasValue ?
                new ObjectParameter("contractId", contractId) :
                new ObjectParameter("contractId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetContactForContract_Result>("GetContactForContract", contractIdParameter);
        }
    
        public virtual ObjectResult<GetSimplifiedContactForContract_Result> GetSimplifiedContactForContract(Nullable<int> contractId)
        {
            var contractIdParameter = contractId.HasValue ?
                new ObjectParameter("contractId", contractId) :
                new ObjectParameter("contractId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSimplifiedContactForContract_Result>("GetSimplifiedContactForContract", contractIdParameter);
        }
    
        public virtual ObjectResult<GetSimplifiedContactForContractAndCount_Result> GetSimplifiedContactForContractAndCount(Nullable<int> contractId, ObjectParameter count)
        {
            var contractIdParameter = contractId.HasValue ?
                new ObjectParameter("contractId", contractId) :
                new ObjectParameter("contractId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSimplifiedContactForContractAndCount_Result>("GetSimplifiedContactForContractAndCount", contractIdParameter, count);
        }
    }
}
